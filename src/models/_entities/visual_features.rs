//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[allow(clippy::struct_excessive_bools)]
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "visual_features")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub frame_percentage: i32,
    #[sea_orm(column_type = "custom(\"vector\")", select_as = "float4[]")]
    pub embedding: Vec<f32>,
    pub scene_type: String,
    pub people_type: Option<String>,
    pub animal_type: Option<String>,
    pub document_type: Option<String>,
    pub object_type: Option<String>,
    pub activity_type: Option<String>,
    pub event_type: Option<String>,
    pub weather_condition: Option<String>,
    pub is_outside: bool,
    pub is_landscape: bool,
    pub is_cityscape: bool,
    pub is_travel: bool,
    pub has_legible_text: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub ocr_text: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub document_summary: Option<String>,
    #[sea_orm(column_type = "Float")]
    pub measured_sharpness: f32,
    pub measured_noise: i32,
    #[sea_orm(column_type = "Float")]
    pub measured_brightness: f32,
    #[sea_orm(column_type = "Float")]
    pub measured_contrast: f32,
    #[sea_orm(column_type = "Float")]
    pub measured_clipping: f32,
    #[sea_orm(column_type = "Float")]
    pub measured_dynamic_range: f32,
    #[sea_orm(column_type = "Float")]
    pub quality_score: f32,
    pub summary: Option<String>,
    pub caption: String,
    pub image_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::face_boxes::Entity")]
    FaceBoxes,
    #[sea_orm(
        belongs_to = "super::images::Entity",
        from = "Column::ImageId",
        to = "super::images::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Images,
    #[sea_orm(has_many = "super::object_boxes::Entity")]
    ObjectBoxes,
    #[sea_orm(has_many = "super::ocr_boxes::Entity")]
    OcrBoxes,
}

impl Related<super::face_boxes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FaceBoxes.def()
    }
}

impl Related<super::images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Images.def()
    }
}

impl Related<super::object_boxes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ObjectBoxes.def()
    }
}

impl Related<super::ocr_boxes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OcrBoxes.def()
    }
}
