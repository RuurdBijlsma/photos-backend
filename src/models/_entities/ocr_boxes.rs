//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "ocr_boxes")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub position: Vec<f32>,
    #[sea_orm(column_type = "Float")]
    pub width: f32,
    #[sea_orm(column_type = "Float")]
    pub height: f32,
    pub text: String,
    #[sea_orm(column_type = "Float")]
    pub confidence: f32,
    pub visual_feature_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::visual_features::Entity",
        from = "Column::VisualFeatureId",
        to = "super::visual_features::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    VisualFeatures,
}

impl Related<super::visual_features::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VisualFeatures.def()
    }
}
