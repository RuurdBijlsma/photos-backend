//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "metadata")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub width: i32,
    pub height: i32,
    pub duration: Option<i32>,
    pub size_bytes: i32,
    pub format: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub exif_tool: Json,
    #[sea_orm(column_type = "JsonBinary")]
    pub file: Json,
    #[sea_orm(column_type = "JsonBinary")]
    pub composite: Json,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub exif: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub xmp: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub mpf: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub jfif: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub icc_profile: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub gif: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub png: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub quicktime: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub matroska: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}
